{"version":3,"sources":["lib/ETError.js","lib/Encryption.js","lib/Decryption.js","component/ETFormText/index.js","component/ETFormPW/index.js","component/ETFormButtonsEncrypt/index.js","component/ETFormButtonsDecrypt/index.js","component/ETFormButtons/index.js","component/ETForm/index.js","component/ETMain/index.js","App.js","serviceWorker.js","index.js"],"names":["ptnMessage","ptnCode","ETError","message","code","previous","test","Error","String","captureStackTrace","this","constructor","name","Encryption","text","password","length","config","minLength","maxLength","SimpleCrypto","encrypt","Decryption","decrypted","decrypt","library","add","faComments","faCheck","ETFormText","html","normal","className","ui","form","label","iconLeft","iconRight","fullwidth","placeholder","value","props","onInput","valueUpdater","required","align","icon","color","help","valid","invalid","React","Component","faKey","ETFormPW","type","ETFormButtonsEncrypt","outlined","rounded","onClick","updater","buttonEncrypt","ETFormButtonsDecrypt","buttonDecrypt","ETFormButtons","kind","encryptUpdater","decryptUpdater","ETForm","state","textValue","textValid","pwValue","pwValid","submittedEncrypt","submittedDecrypt","formReady","wrongPW","updateText","bind","updatePW","submitEncrypt","submitDecrypt","setState","target","pw","e","preventDefault","prevProps","prevState","validateText","validatePW","ETMain","renderAs","size","Head","weight","appName","Body","Footer","donation","bitcoin","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.013634a2.chunk.js","sourcesContent":["/**\n * ETError: the Error class for this project.\n * {\n *  message   {string}\n *  code      {string}\n *  previous  {Error|null}\n * }\n *\n * Code         Message\n * 1            Encryption: invalid text\n * 2            Encryption: invalid password\n * 3            Decryption: invalid text\n * 4            Decryption: invalid password\n */\n\nconst ptnMessage  = /^.+$/u;\nconst ptnCode     = /^\\d+$/;\n\nclass ETError extends Error\n{\n\n  /**\n   * @param {string}     message          Message for human\n   * @param {string}     code             Error code for machine\n   * @param {Error|null} [previous=null]  Previous Error\n   * @exception {Error}  'invalid message' / 'invalid code' / 'invalid previous'\n   */\n  constructor(message, code, previous=null)\n  {\n    if (typeof message !== 'string' || ptnMessage.test(message) === false)\n    {\n      throw new Error('invalid message');\n    }\n\n    if ((typeof code !== 'string' && typeof code !== 'number') ||\n         ptnCode.test(code) === false)\n    {\n      throw new Error('invalid code');\n    }\n\n    if (previous !== null && previous instanceof Error === false)\n    {\n      throw new Error('invalid previous');\n    }\n\n    message = String(message);\n    super(message);\n    code    = String(code);\n\n    // V8\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ETError);\n    }\n\n    // Assignment\n    this.code      = code;\n    this.previous  = previous;\n  }\n\n  toString()\n  {\n    if (this.previous === null)\n    {\n      return (`${this.constructor.name}: ${this.message} / ${this.code}`);\n    }\n    else\n    {\n      return (`${this.constructor.name}: ${this.message} / ${this.code}\\n` + this.previous);\n    }\n  }\n\n}\n\nexport default ETError;\n","/**\n * Data for Encryption\n * {\n *   text:     {plain text}\n *   password: {plain password}\n * }\n */\n\nimport SimpleCrypto from \"simple-crypto-js\";\nimport config from 'config.json';\nimport ETError from 'lib/ETError';\n\nclass Encryption\n{\n  /**\n   * @param {string} text\n   * @param {string} password\n   * @exception {ETError}  1 / 2\n   */\n  constructor(text, password)\n  {\n    if (typeof text !== 'string' ||\n       (text.length < config.text.minLength || text.length > config.text.maxLength))\n    {\n      throw new ETError('Encryption: invalid text', 1);\n    }\n\n    if (typeof password !== 'string' ||\n       (password.length < config.password.minLength || password.length > config.password.maxLength))\n    {\n      throw new ETError('Encryption: invalid password', 2);\n    }\n\n    this.text     = text;\n    this.password = password;\n  }\n\n  /**\n   * @return {string} Encrypted text\n   */\n  encrypt()\n  {\n    let sc = new SimpleCrypto(this.password);\n    let encrypted = sc.encrypt(this.text);\n    return encrypted;\n  }\n}\n\nexport default Encryption;\n","/**\n * Data for Decryption\n * {\n *   text:     {encrypted text}\n *   password: {plain password}\n * }\n */\n\nimport SimpleCrypto from \"simple-crypto-js\";\nimport config from 'config.json';\nimport ETError from 'lib/ETError';\n\nclass Decryption\n{\n  /**\n   * @param {string} text\n   * @param {string} password\n   * @exception {ETError}  3 / 4\n   */\n  constructor(text, password)\n  {\n    if (typeof text !== 'string' ||\n       (text.length < config.text.minLength || text.length > config.text.maxLength))\n    {\n      throw new ETError('Decryption: invalid text', 3);\n    }\n\n    if (typeof password !== 'string' ||\n       (password.length < config.password.minLength || password.length > config.password.maxLength))\n    {\n      throw new ETError('Decryption: invalid password', 4);\n    }\n\n    this.text     = text;\n    this.password = password;\n  }\n\n  /**\n   * @return {string} Decrypted text\n   * @exception {ETError} 4\n   */\n  decrypt()\n  {\n    let sc = new SimpleCrypto(this.password);\n    let decrypted = sc.decrypt(this.text);\n    if (decrypted === '')\n    {\n      throw new ETError('Decryption: invalid password', 4);\n    }\n    else\n    {\n      return decrypted;\n    }\n  }\n}\n\nexport default Decryption;\n","import React from 'react';\nimport './index.scss';\nimport config from 'config.json';\nimport ui     from 'ui.json';\nimport {\n  Field,\n  Control,\n  Label,\n  Textarea,\n  Help,\n} from 'react-bulma-components/lib/components/form';\nimport Icon from 'react-bulma-components/lib/components/icon';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faComments, faCheck } from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faComments, faCheck);\n\nexport default class ETFormText extends React.Component\n{\n  render()\n  {\n    let html = {\n      normal: (\n        <Field>\n          <Label className=\"has-text-white\">{ui.form.text.label}</Label>\n          <Control iconLeft iconRight fullwidth>\n            <Textarea placeholder={ui.form.text.placeholder} className=\"etformtext_textarea has-background-grey-dark has-text-white\"\n              value={this.props.value} onInput={this.props.valueUpdater}\n              maxLength={config.text.maxLength} minLength={config.text.minLength} required />\n            <Icon align=\"left\">\n              <FontAwesomeIcon icon=\"comments\" color=\"white\" />\n            </Icon>\n            <Icon align=\"right\" className=\"et_hidden\">\n              <FontAwesomeIcon icon=\"check\" color=\"lime\" />\n            </Icon>\n          </Control>\n          <Help color=\"danger\" className=\"et_hidden has-text-right\">{ui.form.text.help}</Help>\n        </Field>\n      ),\n      valid: (\n        <Field>\n          <Label className=\"has-text-white\">{ui.form.text.label}</Label>\n          <Control iconLeft iconRight fullwidth>\n            <Textarea placeholder={ui.form.text.placeholder} className=\"et_form_valid etformtext_textarea has-background-grey-dark has-text-white\"\n              value={this.props.value} onInput={this.props.valueUpdater}\n              maxLength={config.text.maxLength} minLength={config.text.minLength} required />\n            <Icon align=\"left\">\n              <FontAwesomeIcon icon=\"comments\" color=\"white\" />\n            </Icon>\n            <Icon align=\"right\">\n              <FontAwesomeIcon icon=\"check\" color=\"lime\" />\n            </Icon>\n          </Control>\n          <Help color=\"danger\" className=\"et_hidden has-text-right\">{ui.form.text.help}</Help>\n        </Field>\n      ),\n      invalid: (\n        <Field>\n          <Label className=\"has-text-white\">{ui.form.text.label}</Label>\n          <Control iconLeft iconRight fullwidth>\n            <Textarea placeholder={ui.form.text.placeholder} className=\"et_form_invalid etformtext_textarea has-background-grey-dark has-text-white\"\n              value={this.props.value} onInput={this.props.valueUpdater}\n              maxLength={config.text.maxLength} minLength={config.text.minLength} required />\n            <Icon align=\"left\">\n              <FontAwesomeIcon icon=\"comments\" color=\"white\" />\n            </Icon>\n            <Icon align=\"right\" className=\"et_hidden\">\n              <FontAwesomeIcon icon=\"check\" color=\"lime\" />\n            </Icon>\n          </Control>\n          <Help color=\"danger\" className=\"has-text-right\">{ui.form.text.help}</Help>\n        </Field>\n      )\n    };\n\n    switch (this.props.valid) {\n      case true:\n        html = html.valid;\n        break;\n      case false:\n        html = html.invalid;\n        break;\n      default:\n        html = html.normal;\n    }\n\n    return html;\n  }\n};\n","import React from 'react';\nimport './index.scss';\nimport config from 'config.json';\nimport ui     from 'ui.json';\nimport {\n  Field,\n  Control,\n  Label,\n  Input,\n  Help,\n} from 'react-bulma-components/lib/components/form';\nimport Icon from 'react-bulma-components/lib/components/icon';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faKey, faCheck } from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faKey, faCheck);\n\nexport default class ETFormPW extends React.Component\n{\n  render()\n  {\n    let html = {\n      normal: (\n        <Field>\n          <Label className=\"has-text-white\">{ui.form.password.label}</Label>\n          <Control iconLeft iconRight fullwidth>\n            <Input type=\"password\" className=\"etformpw_input has-background-grey-dark has-text-white\"\n              value={this.props.value} onInput={this.props.valueUpdater}\n              maxLength={config.password.maxLength} minLength={config.password.minLength} required />\n            <Icon align=\"left\">\n              <FontAwesomeIcon icon=\"key\" color=\"white\" />\n            </Icon>\n            <Icon align=\"right\" className=\"et_hidden\">\n              <FontAwesomeIcon icon=\"check\" color=\"lime\" />\n            </Icon>\n          </Control>\n          <Help color=\"danger\" className=\"et_hidden has-text-right\">{ui.form.password.help}</Help>\n        </Field>\n      ),\n      valid: (\n        <Field>\n          <Label className=\"has-text-white\">{ui.form.password.label}</Label>\n          <Control iconLeft iconRight fullwidth>\n            <Input type=\"password\" className=\"et_form_valid etformpw_input has-background-grey-dark has-text-white\"\n              value={this.props.value} onInput={this.props.valueUpdater}\n              maxLength={config.password.maxLength} minLength={config.password.minLength} required />\n            <Icon align=\"left\">\n              <FontAwesomeIcon icon=\"key\" color=\"white\" />\n            </Icon>\n            <Icon align=\"right\">\n              <FontAwesomeIcon icon=\"check\" color=\"lime\" />\n            </Icon>\n          </Control>\n          <Help color=\"danger\" className=\"et_hidden has-text-right\">{ui.form.password.help}</Help>\n        </Field>\n      ),\n      invalid: (\n        <Field>\n          <Label className=\"has-text-white\">{ui.form.password.label}</Label>\n          <Control iconLeft iconRight fullwidth>\n            <Input type=\"password\" className=\"et_form_invalid etformpw_input has-background-grey-dark has-text-white\"\n              value={this.props.value} onInput={this.props.valueUpdater}\n              maxLength={config.password.maxLength} minLength={config.password.minLength} required />\n            <Icon align=\"left\">\n              <FontAwesomeIcon icon=\"key\" color=\"white\" />\n            </Icon>\n            <Icon align=\"right\" className=\"et_hidden\">\n              <FontAwesomeIcon icon=\"check\" color=\"lime\" />\n            </Icon>\n          </Control>\n          <Help color=\"danger\" className=\"has-text-right\">{ui.form.password.help}</Help>\n        </Field>\n      )\n    };\n\n    switch (this.props.valid) {\n      case true:\n        html = html.valid;\n        break;\n      case false:\n        html = html.invalid;\n        break;\n      default:\n        html = html.normal;\n    }\n\n    return html;\n  }\n};\n","import React from 'react';\nimport './index.scss';\nimport ui     from 'ui.json';\nimport {Control} from 'react-bulma-components/lib/components/form';\nimport Button from 'react-bulma-components/lib/components/button';\n\nexport default class ETFormButtonsEncrypt extends React.Component\n{\n  render()\n  {\n    return (\n      <Control>\n          <Button color=\"primary\" outlined rounded onClick={this.props.updater}>{ui.form.buttonEncrypt.label}</Button>\n      </Control>\n    );\n  }\n};\n","import React from 'react';\nimport './index.scss';\nimport ui     from 'ui.json';\nimport {Control} from 'react-bulma-components/lib/components/form';\nimport Button from 'react-bulma-components/lib/components/button';\n\nexport default class ETFormButtonsDecrypt extends React.Component\n{\n  render()\n  {\n    return (\n      <Control>\n          <Button color=\"link\" outlined rounded onClick={this.props.updater}>{ui.form.buttonDecrypt.label}</Button>\n      </Control>\n    );\n  }\n};\n","import React from 'react';\nimport './index.scss';\nimport {Field} from 'react-bulma-components/lib/components/form';\nimport ETFormButtonsEncrypt from 'component/ETFormButtonsEncrypt';\nimport ETFormButtonsDecrypt from 'component/ETFormButtonsDecrypt';\n\nexport default class ETFormButtons extends React.Component\n{\n  render()\n  {\n    return (\n      <Field kind=\"group\" align=\"centered\" className=\"etformbuttons\">\n        <ETFormButtonsEncrypt updater={this.props.encryptUpdater} />\n        <ETFormButtonsDecrypt updater={this.props.decryptUpdater} />\n      </Field>\n    );\n  }\n};\n","import React from 'react';\nimport './index.scss';\nimport config from 'config.json';\nimport Encryption from 'lib/Encryption';\nimport Decryption from 'lib/Decryption';\nimport ETFormText from 'component/ETFormText';\nimport ETFormPW   from 'component/ETFormPW';\nimport ETFormButtons from 'component/ETFormButtons';\n\nexport default class ETForm extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.state = {\n      textValue        : '',\n      textValid        : null,\n      pwValue          : '',\n      pwValid          : null,\n      submittedEncrypt : false,\n      submittedDecrypt : false,\n      formReady        : false,\n      wrongPW          : false\n    };\n\n    this.updateText    = this.updateText.bind(this);\n    this.updatePW      = this.updatePW.bind(this);\n    this.submitEncrypt = this.submitEncrypt.bind(this);\n    this.submitDecrypt = this.submitDecrypt.bind(this);\n  }\n\n  render()\n  {\n    return (\n      <form className=\"etform has-background-grey-darker has-text-white\">\n        <ETFormText value={this.state.textValue} valid={this.state.textValid} valueUpdater={this.updateText} />\n        <ETFormPW value={this.state.pwValue} valid={this.state.pwValid} valueUpdater={this.updatePW} />\n        <ETFormButtons encryptUpdater={this.submitEncrypt} decryptUpdater={this.submitDecrypt} />\n      </form>\n    );\n  }\n\n  validateText()\n  {\n    if (this.state.textValue === '')\n    {\n      return null;\n    }\n\n    if (typeof this.state.textValue !== 'string' ||\n        (this.state.textValue.length < config.text.minLength ||\n         this.state.textValue.length > config.text.maxLength))\n    {\n      return false;\n    }\n    else\n    {\n      return true;\n    }\n  }\n\n  validatePW()\n  {\n    if (this.state.wrongPW === true)\n    {\n      return false;\n    }\n\n    if (this.state.pwValue === '')\n    {\n      return null;\n    }\n\n    if (typeof this.state.pwValue !== 'string' ||\n        (this.state.pwValue.length < config.password.minLength ||\n         this.state.pwValue.length > config.password.maxLength))\n    {\n      return false;\n    }\n    else\n    {\n      return true;\n    }\n  }\n\n  updateText(text)\n  {\n    this.setState({\n      textValue        : text.target.value,\n      submittedEncrypt : false,\n      submittedDecrypt : false,\n      formReady        : false,\n      wrongPW          : false\n    });\n  }\n\n  updatePW(pw)\n  {\n    this.setState({\n      pwValue          : pw.target.value,\n      submittedEncrypt : false,\n      submittedDecrypt : false,\n      formReady        : false,\n      wrongPW          : false\n    });\n  }\n\n  encrypt()\n  {\n    let enc = new Encryption(this.state.textValue, this.state.pwValue);\n    return enc.encrypt();\n  }\n\n  decrypt()\n  {\n    try\n    {\n      let dec = new Decryption(this.state.textValue, this.state.pwValue);\n      return dec.decrypt();\n    }\n    catch (e)\n    {\n      throw e;\n    }\n  }\n\n  submitEncrypt(e)\n  {\n    this.setState({\n      submittedEncrypt : true,\n      submittedDecrypt : false,\n      formReady        : false,\n      wrongPW          : false\n    });\n\n    e.preventDefault();\n  }\n\n  submitDecrypt(e)\n  {\n    this.setState({\n      submittedEncrypt : false,\n      submittedDecrypt : true,\n      formReady        : false,\n      wrongPW          : false\n    });\n\n    e.preventDefault();\n  }\n\n  componentDidUpdate(prevProps, prevState)\n  {\n    // Validate Text\n    if (prevState.textValue !== this.state.textValue)\n    {\n      this.setState({ textValid: this.validateText() });\n    }\n\n    // Validate Password\n    if (prevState.pwValue   !== this.state.pwValue   ||\n        prevState.textValue !== this.state.textValue ||\n        prevState.wrongPW   !== this.state.wrongPW)\n    {\n      this.setState({ pwValid: this.validatePW() });\n    }\n\n    // Click Encrypt\n    if (prevState.submittedEncrypt === false &&\n        this.state.submittedEncrypt === true)\n    {\n      if (this.validateText() === true && this.validatePW() === true)\n      {\n        this.setState({\n          submittedEncrypt : true,\n          submittedDecrypt : false,\n          formReady        : true,\n          wrongPW          : false\n        });\n      }\n      else\n      {\n        this.setState({\n          submittedEncrypt : false,\n          submittedDecrypt : false,\n          formReady        : false,\n          wrongPW          : false\n        });\n      }\n    }\n\n    // Click Decrypt\n    if (prevState.submittedDecrypt === false &&\n        this.state.submittedDecrypt === true)\n    {\n      if (this.validateText() === true && this.validatePW() === true)\n      {\n        this.setState({\n          submittedEncrypt : false,\n          submittedDecrypt : true,\n          formReady        : true,\n          wrongPW          : false\n        });\n      }\n      else\n      {\n        this.setState({\n          submittedEncrypt : false,\n          submittedDecrypt : false,\n          formReady        : false\n        });\n      }\n    }\n\n    // Encrypt\n    if (prevState.formReady === false &&\n        this.state.formReady === true &&\n        this.state.submittedEncrypt === true)\n    {\n      this.setState({\n        textValue        : this.encrypt(),\n        submittedEncrypt : false,\n        submittedDecrypt : false,\n        formReady        : false,\n        wrongPW          : false\n      });\n    }\n\n    // Decrypt\n    if (prevState.formReady === false &&\n        this.state.formReady === true &&\n        this.state.submittedDecrypt === true)\n    {\n      try\n      {\n        this.setState({\n          textValue        : this.decrypt(),\n          submittedEncrypt : false,\n          submittedDecrypt : false,\n          formReady        : false,\n          wrongPW          : false\n        });\n      }\n      catch (e)\n      {\n        this.setState({\n          submittedEncrypt : false,\n          submittedDecrypt : false,\n          formReady        : false,\n          wrongPW          : true\n        });\n      }\n    }\n  }\n\n};\n","import React from 'react';\nimport './index.scss';\nimport config from 'config.json';\nimport ui     from 'ui.json';\nimport Hero from 'react-bulma-components/lib/components/hero';\nimport Container from 'react-bulma-components/lib/components/container';\nimport Heading from 'react-bulma-components/lib/components/heading';\nimport ETForm from 'component/ETForm';\n\nexport default class ETMain extends React.Component\n{\n  render()\n  {\n    return (\n      <Hero renderAs=\"main\" size=\"fullheight\" color=\"black\">\n        <Hero.Head renderAs=\"header\" className=\"etmain_header has-background-grey-darker has-text-centered\">\n          <Heading size=\"4\" weight=\"normal\">{ui.appName}</Heading>\n        </Hero.Head>\n        <Hero.Body>\n          <Container>\n            <ETForm />\n          </Container>\n        </Hero.Body>\n        <Hero.Footer renderAs=\"footer\" className=\"etmain_footer has-background-grey-darker has-text-centered\">\n          <p>{ui.donation}: {config.donation.bitcoin}</p>\n        </Hero.Footer>\n      </Hero>\n    );\n  }\n};\n","import React from 'react';\nimport './App.scss';\nimport ETMain from 'component/ETMain';\n\nfunction App() {\n  return (\n    <ETMain />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}